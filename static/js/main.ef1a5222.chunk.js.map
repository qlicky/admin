{"version":3,"sources":["constants.js","commands/base.js","commands/mapping.js","commands/option.js","commands/password.js","qlicky.js","main.js","App.js","serviceWorker.js","index.js"],"names":["commands","value","label","wifiOptions","systemOptions","bluetoothOptions","pins","i","push","validateTextField","text","onlyAlphaNumeric","maxLength","replace","length","slice","md5","require","QRCode","BaseCommand","props","generateCommand","state","password","alert","command","commandType","JSON","stringify","console","log","secret","signature","btoa","onChange","e","validate","target","setState","name","displayQRCode","_","code","includeMargin","size","Math","min","width","showPassword","React","Component","Mapping","pushEmptyRows","count","mapping","removeDuplicates","remove","floorMemo","pinMemo","duplicatePins","duplicateFloors","forEach","index","key","Object","keys","newMapping","createCode","mappings","editRow","addRow","pop","updateMap","maxCharacters","makeOptionRow","row","Grid","container","spacing","direction","justify","alignItems","item","TextField","FormControl","style","minWidth","InputLabel","Select","options","map","option","MenuItem","makeFreeTextRow","this","freeRow","Button","variant","onClick","Option","selectedOption","Password","newPassword","confirmPassword","icon","title","QlickyAdmin","renderCommand","resize","bind","window","addEventListener","innerWidth","height","innerHeight","isNaN","Helmet","content","rel","type","href","sizes","Main","verifyPassword","passwordAccepted","createReprogramTool","createPasswordScreen","App","className","exact","path","component","Boolean","location","hostname","match","app","basename","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef1a5222.chunk.js","sourcesContent":["let commands = [\n    // { value: \"PASS\", label: \"Set Password\" },\n    { value: \"DRY\", label: \"Set Relay Mapping\" },\n    { value: \"DIR\", label: \"Set Directory Mapping\" },\n    // { value: \"AC\", label: \"Set Access Control\" },\n    // { value: \"WIFI\", label: \"Set WiFi\" },\n    // { value: \"BLE\", label: \"Set Bluetooth\" },\n    // { value: \"SYS\", label: \"Set System\" },\n]\n\nlet wifiOptions = [\n    { value: \"ON\", label: \"On\" },\n    { value: \"OFF\", label: \"Off\" },\n]\n\nlet systemOptions = [\n    // { value: \"REBOOT\", label: \"Reboot\" },\n    { value: \"RESET\", label: \"Reset\" },\n    // { value: \"DEMO\", label: \"Demo\" },\n]\n\nlet bluetoothOptions = [\n    { value: \"ON\", label: \"On\" },\n    { value: \"OFF\", label: \"Off\" },\n]\n\nlet pins = []\nfor (var i = 1; i <= 32; i++) {\n    pins.push({ value: i, label: i })\n}\n\nconst validateTextField = (text, onlyAlphaNumeric = true, maxLength = 50) => {\n    if (onlyAlphaNumeric)\n        text = text.replace(/[^a-z0-9]/gi, '')\n\n    if (text.length > maxLength) {\n        text = text.slice(0, maxLength)\n    }\n    return text\n}\n\nexport { commands, wifiOptions, systemOptions, bluetoothOptions, pins, validateTextField }","/**\n * A Base class for every command in this system\n * TODO: Document\n */\nimport React from 'react';\nimport  { validateTextField } from \"../constants.js\"\n\nvar md5 = require(\"blueimp-md5\")\nvar QRCode = require('qrcode.react');\n\nconst MSG_VERSION = 1\n\nexport const setProp = (prop, fallback) => {\n    return prop ? prop : fallback\n}\n\nexport class BaseCommand extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            code: \"\",\n            showPassword: false,\n            password: \"\",\n        }\n    }\n\n    generateCommand = (value) => {\n        if (!this.state.password || this.state.password.length < 8) {\n            alert(\"Password must be at least 8 characters long\")\n            return null\n        }\n        var command = {\n            \"N\": MSG_VERSION,\n            \"T\": this.props.commandType,\n            \"V\": value\n        }\n        command = JSON.stringify(command)\n        console.log(command)\n\n        let secret = this.state.password + this.state.password\n\n        // Set the parameter to True to get the raw string\n        let signature = btoa(md5(command, secret, true))\n        command = `{P}|{${signature}}|${command}`\n        console.log(command)\n        return command\n    }\n\n    // Use this for any generic text field\n    onChange = (e, validate = true, maxLength = 50) => {\n        var value = e.target.value\n        if (validate) value = validateTextField(value, true, maxLength)\n        this.setState({ [e.target.name]: value, code: \"\" })\n    }\n\n    displayQRCode = _ => {\n        if (this.state.code && this.state.code.length > 1) {\n            return (<div><QRCode includeMargin={true} value={this.state.code} size={Math.min(this.props.width * 0.90, 480)} /></div>)\n        }\n    }\n}","/**\n * Shared Class between all mapping based\n * commands. \n * Example: DIR, DRY\n */\n\nimport React from 'react';\nimport { validateTextField } from \"../constants.js\"\nimport {\n    Grid, TextField, Button,\n    FormControl, InputLabel, MenuItem, Select\n} from \"@material-ui/core\"\n\nimport { BaseCommand } from \"./base\"\n\nconst MAX_ROWS = 16\nconst MIN_ROWS = 4\n\nexport default class Mapping extends BaseCommand {\n    constructor(props) {\n        super(props);\n        this.mapping = []\n        this.state = {\n            mapping: [],\n        };\n    }\n\n    // Key =  Floor/Directory \n    // Value = Pin\n    componentDidMount() {\n        this.mapping = []\n        this.pushEmptyRows(MIN_ROWS)\n        this.setState({ mapping: this.mapping })\n    }\n\n    pushEmptyRows = (count) => {\n        for (var i = 0; i < count; i++)\n            this.mapping.push({ \"value\": \"\", \"key\": \"\" })\n    }\n\n    removeDuplicates = (remove = false) => {\n        // Use dict for O(1) search\n        var floorMemo = {}\n        var pinMemo = {}\n        var duplicatePins = {}\n        var duplicateFloors = {}\n\n        this.mapping.forEach(function (mapping, index) {\n            if (mapping.key) {\n                if (mapping.key in floorMemo) duplicateFloors[index] = true\n                else floorMemo[mapping.key] = true;\n            }\n            if (mapping.value) {\n                if (mapping.value in pinMemo) duplicatePins[index] = true\n                else pinMemo[mapping.value] = true\n            }\n        })\n\n        if (Object.keys(duplicatePins).length > 0 || Object.keys(duplicateFloors).length > 0) {\n            alert(\"WARNING: Duplicate mappings found. Auto-removing.\")\n        }\n        if (remove) {\n            var newMapping = []\n            this.mapping.forEach((mapping, index) => {\n                if (!(index in duplicateFloors || index in duplicatePins))\n                    newMapping.push(mapping)\n            })\n            this.mapping = newMapping;\n            if (newMapping.length < MIN_ROWS) {\n                this.pushEmptyRows(MIN_ROWS - newMapping.length)\n            }\n            this.setState({ mapping: newMapping })\n        }\n        return;\n    }\n\n    createCode = () => {\n        if (this.state.mapping.length === 0) {\n            alert(\"Empty Key-Value map. Cannot generate QR Code\")\n            return null\n        }\n        this.removeDuplicates(true)\n        var mappings = \"\"\n        this.state.mapping.forEach(function (mapping, _) {\n            if (mapping[\"key\"] !== \"\" && mapping[\"value\"] !== \"\")\n                mappings = `${mappings}\"${mapping.key}\":\"${mapping.value}\",`\n        })\n        if (mappings.length > 0) {\n            mappings = `{${mappings.slice(0, -1)}}`\n            console.log(`Mappings: ${JSON.stringify(mappings)}`)\n            let command = this.generateCommand(mappings)\n            if (command) {\n                this.setState({ code: command })\n            }\n        } else {\n            alert(\"Empty mapping set\")\n        }\n    }\n\n    editRow = (_, addRow) => {\n        if (addRow) {\n            if (this.state.mapping.length >= MAX_ROWS) {\n                alert(`A maximimum of ${MAX_ROWS} allowed per QR Code`)\n            } else {\n                this.pushEmptyRows(1);\n                this.setState({ mapping: this.mapping })\n            }\n        } else {\n            if (this.state.mapping.length > MIN_ROWS) {\n                this.mapping.pop()\n                this.setState({ mapping: this.mapping })\n            }\n        }\n    }\n\n    updateMap = (e, name, index, maxCharacters = 20, validate = false) => {\n        var value = e.target.value;\n        if (validate) value = validateTextField(value, true, maxCharacters)\n        this.mapping[index][name] = value\n        this.setState({ mapping: this.mapping, code: \"\" })\n    }\n\n    makeOptionRow = (row, index) => {\n        if (!row) return\n        return (\n            <Grid container spacing={5} direction={\"row\"} justify=\"center\" alignItems=\"center\" key={`${index}`}>\n                <Grid item>\n                    <TextField\n                        name={`${index}`}\n                        value={this.state.mapping[index].key}\n                        label=\"Floor No\"\n                        onChange={(e) => this.updateMap(e, \"key\", index, 20, true)}\n                    />\n                </Grid>\n                <Grid item>\n                    <FormControl style={{ minWidth: 120 }}>\n                        <InputLabel>Pin No</InputLabel>\n                        <Select\n                            name={`${index}`}\n                            value={this.state.mapping[index].value}\n                            onChange={(e) => this.updateMap(e, \"value\", index)}\n                        >\n                            {this.props.options.map((option, index) => {\n                                return (\n                                    <MenuItem value={option.value} key={`${index}`}>{option.label}</MenuItem>\n                                )\n                            })}\n                        </Select>\n                    </FormControl>\n                </Grid>\n            </Grid >\n        )\n    }\n\n    makeFreeTextRow = (row, index) => {\n        if (!row) return\n        return (\n            <Grid container spacing={5} direction={\"row\"} justify=\"center\" alignItems=\"center\" key={`${index}`}>\n                <Grid item>\n                    <TextField\n                        name={`key-${index}`}\n                        value={this.state.mapping[index].key}\n                        label=\"Keyword\"\n                        onChange={(e) => this.updateMap(e, \"key\", index, 50)}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        name={`value-${index}`}\n                        value={this.state.mapping[index].value}\n                        label=\"Floor No\"\n                        onChange={(e) => this.updateMap(e, \"value\", index, 20)}\n                    />\n                </Grid>\n            </Grid >\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid container spacing={3} direction={\"column\"}>\n                    <Grid item>\n                        <TextField name='password'\n                            value={this.state.password || ''}\n                            label=\"Password\"\n                            onChange={this.onChange} />\n                    </Grid>\n                    <Grid item>\n                        {this.state.mapping.map((row, index) => {\n                            return this.props.freeRow ?\n                                this.makeFreeTextRow(row, index) :\n                                this.makeOptionRow(row, index)\n                        })}\n                    </Grid>\n                    <Grid container spacing={3} direction=\"row\" justify=\"center\" alignItems=\"center\">\n                        <Grid item>\n                            <Button variant=\"contained\"\n                                onClick={(e) => this.editRow(e, true)}> Add </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button variant=\"contained\"\n                                onClick={(e) => this.editRow(e, false)}> Remove </Button>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <Button variant=\"contained\" onClick={this.createCode}> Generate Code </Button>\n                    </Grid>\n                    <Grid item>\n                        {this.displayQRCode()}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}","/*\n    A Shared UI Config between all the \n    SINGLE option based CommandTypes \n    Example: BLE, SYS, WIFI\n*/\nimport React from 'react';\nimport {\n    Grid, TextField, Button,\n    FormControl, InputLabel, MenuItem, Select\n} from \"@material-ui/core\"\nimport { BaseCommand } from './base.js';\n\nexport default class Option extends BaseCommand {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedOption: \"\",\n        };\n    }\n\n    createCode = () => {\n        if (this.state.selectedOption.length === 0) {\n            alert(\"Empty Key-Value map. Cannot generate QR Code\")\n            return null\n        }\n\n        if (this.state.selectedOption) {\n            let command = this.generateCommand(this.state.selectedOption)\n            this.setState({ code: command })\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid container spacing={2} direction={\"column\"}>\n                    <Grid item>\n                        <TextField name='password'\n                            value={this.state.password || ''}\n                            label=\"Password\"\n                            onChange={this.onChange} />\n                    </Grid>\n                    <Grid item>\n                        <FormControl style={{ minWidth: 120 }}>\n                            <InputLabel>Select</InputLabel>\n                            <Select\n                                name=\"selectedOption\"\n                                value={this.state.selectedOption}\n                                onChange={this.onChange}\n                            >\n                                {this.props.options.map((option, index) => {\n                                    return (\n                                        <MenuItem value={option.value} key={`${index}`}>{option.label}</MenuItem>\n                                    )\n                                })}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item>\n                        <Button variant=\"contained\" onClick={this.createCode}>Generate Code</Button>\n                    </Grid>\n                    <Grid>\n                        {this.displayQRCode()}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { BaseCommand } from \"./base.js\"\nimport {\n    Grid, TextField, Button,\n} from \"@material-ui/core\"\n\nclass Password extends BaseCommand {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newPassword: \"\",\n            confirmPassword: \"\",\n        };\n    }\n\n    createCode = () => {\n        if (this.state.newPassword === \"\" || this.state.confirmPassword === \"\") {\n            alert(\"New password fields cannot be empty\")\n            return null;\n        }\n\n        if (this.state.newPassword !== this.state.confirmPassword) {\n            alert(\"Passwords do not match\")\n            return null;\n        }\n\n        if (this.state.newPassword.length >= 8) {\n            let command = this.generateCommand(this.state.newPassword)\n            this.setState({ code: command })\n        } else {\n            alert(\"Password needs to be minimum of 8 characters\")\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid container spacing={3} direction={\"column\"}>\n                    <Grid item>\n                        <TextField name='password'\n                            value={this.state.password || ''}\n                            label=\"Old Password\"\n                            onChange={(e) => this.onChange(e, true, 50)} />\n                    </Grid>\n                    <Grid item>\n                        <TextField name='newPassword'\n                            value={this.state.newPassword || ''}\n                            label=\"New Password\"\n                            onChange={(e) => this.onChange(e, true, 50)} />\n                    </Grid>\n                    <Grid item>\n                        <TextField name='confirmPassword'\n                            value={this.state.confirmPassword || ''}\n                            label=\"Confirm Password\"\n                            onChange={(e) => this.onChange(e, true, 50)} />\n                    </Grid>\n                    <Grid item>\n                        <Button variant=\"contained\" onClick={this.createCode}>Generate Code</Button>\n                    </Grid>\n                    <Grid>\n                        {this.displayQRCode()}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Password","import React from 'react';\nimport {\n    Grid, FormControl, InputLabel,\n    MenuItem, Select\n} from \"@material-ui/core\"\nimport Helmet from 'react-helmet'\n\n// Custom Command Components\nimport Mapping from \"./commands/mapping\"\nimport Option from \"./commands/option\"\nimport Password from \"./commands/password\"\n\nimport { commands, wifiOptions, systemOptions, bluetoothOptions, pins } from \"./constants.js\"\n\nconst icon = \"icons/qlicky.png\"\nconst title = \"Qlicky Admin\"\n\nexport default class QlickyAdmin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.resize = this.resize.bind(this)\n        this.state = {\n            commandType: \"DRY\",\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.resize)\n        this.resize()\n    }\n\n    resize() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    onChange = (e) => {\n        console.log(e.target.value)\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    renderCommand = () => {\n        switch (this.state.commandType) {\n            case \"PASS\":\n                return (\n                    <Password\n                        commandType={this.state.commandType}\n                        width={this.state.width}\n                        key={\"PASS\"} />\n                )\n            case \"DRY\":\n                return (\n                    <Mapping\n                        commandType={this.state.commandType}\n                        options={pins}\n                        width={this.state.width}\n                        key={\"DRY\"} />)\n            case \"DIR\":\n                return (\n                    <Mapping\n                        commandType={this.state.commandType}\n                        freeRow={true}\n                        options={pins}\n                        width={this.state.width}\n                        key={\"DIR\"} />\n                )\n            case \"WIFI\":\n                return (\n                    <Option\n                        commandType={this.state.commandType}\n                        options={wifiOptions}\n                        width={this.state.width}\n                        key={\"WIFI\"} />\n                )\n            case \"BLE\":\n                return (\n                    <Option\n                        commandType={this.state.commandType}\n                        options={bluetoothOptions}\n                        width={this.state.width}\n                        key={\"BLE\"} />\n                )\n            case \"SYS\":\n                return (\n                    <Option\n                        commandType={this.state.commandType}\n                        options={systemOptions}\n                        width={this.state.width}\n                        key={\"SYS\"} />\n                )\n            default:\n                return null\n        }\n    }\n\n    render() {\n        if (isNaN(this.state.width) || isNaN(this.state.height)) { return (<div />) }\n        return (\n            <div>\n                <Helmet>\n                    <title>{title}</title>\n                    <meta name={title} content={title} />\n                    <link rel=\"icon\" type=\"image/png\" href={icon} sizes=\"16x16\" />\n                    <link rel=\"apple-touch-icon\" type=\"image/png\" href={icon} sizes=\"16x16\" />\n                </Helmet>\n                <Grid container spacing={3} direction={\"column\"}>\n                    <Grid item> <h2> Qlicky Reprogram Tool </h2> </Grid>\n                    <Grid item>\n                        <FormControl style={{ minWidth: 120 }}>\n                            <InputLabel>Command</InputLabel>\n                            <Select\n                                name=\"commandType\"\n                                value={this.state.commandType}\n                                onChange={this.onChange}\n                            >\n                                {commands.map((option, index) => {\n                                    return (\n                                        <MenuItem value={option.value} key={`${index}`}>{option.label}</MenuItem>\n                                    )\n                                })}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                    <Grid item>\n                        {this.renderCommand()}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Grid, TextField, Button } from \"@material-ui/core\"\nimport QlickyAdmin from \"./qlicky.js\"\n\nexport default class Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            password: \"\",\n            passwordAccepted: false,\n        };\n    }\n\n    verifyPassword = _ => {\n        if (this.state.password && this.state.password === 'touchless') {\n            this.setState({ passwordAccepted: true })\n        } else {\n            alert(\"Incorrect Password!\")\n        }\n    }\n\n    createReprogramTool = _ => {\n        return (\n            <div><QlickyAdmin /></div>\n        )\n    }\n\n    createPasswordScreen = _ => {\n        return (\n            <div>\n                <Grid container spacing={3} direction={\"column\"}>\n                    <Grid item> <h2> Qlicky Reprogram Tool </h2> </Grid>\n                    <Grid item> Please enter password to continue </Grid>\n                    <Grid item>\n                        <TextField\n                            type=\"text\"\n                            name=\"password\"\n                            value={this.state.password}\n                            label=\"Password\"\n                            onChange={(e) => {\n                                this.setState({ [e.target.name]: e.target.value })\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            variant=\"contained\"\n                            onClick={this.verifyPassword}>Open Tool</Button>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.passwordAccepted ? this.createReprogramTool() : this.createPasswordScreen()}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Main from './main'\nimport { Route, Switch } from 'react-router-dom';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={Main} />\n        </Switch>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom'\n\nconst app = (\n  <HashRouter basename={process.env.PUBLIC_URL}>\n    <App/>\n  </HashRouter>\n)\n\nReactDOM.render( app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}